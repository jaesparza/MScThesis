-- File:        PWMgenerator.vdmrt
-- Description: Generates a PWM signal. Two default signals of different duration are
--              available.
-- Author:      Jose Antonio Esparza
--              jaesparza@gmail.com

class PWMunit

instance variables

  -- References to the sampler and the
  -- controller
  public outLog : Sampler;
  public controller : Controller;

  -- Allows the generation of two different
  -- predefined signals
  private periodSelector : nat := 1;

  -- Sets a reference to the GPIO interface
  public outputInt : gpioInterface;

  -- Done flag updated when operation completion
  -- has been reached
   public done : bool := false;

  -- Counter keeping track of the
  -- simulation progress
  public runCount : nat := 0;

  -- Number of control periods that have to
  -- be generated
  static public exLimit : nat := 30;

operations 

-- Associate a GPIO block to the PWM unit
-- controller
public setGPIO : gpioInterface ==> ()
setGPIO(g) ==
  outputInt := g;

-- Associate a controller to the PWMgenerator
public PWMunit : Controller ==> PWMunit
PWMunit(c) ==
  controller := c;

public generateSignal : () ==> ()
generateSignal () ==
(
  if runCount < exLimit then
  (
     duration(2E6) outputInt.toggleBit(1);
     duration(0) outputInt.toggleBit(1);
     duration(18E6) ();
     runCount := runCount + 1; 
  )
  else
  (
     duration (0)  done := true;
  );
);

-- Get completion flag
public getFlag : () ==> bool
getFlag() ==
  return done;

-- Get the selected period by the discrete processing
-- unit
private getPeriod : () ==> nat
getPeriod() ==
  return periodSelector;

-- Sets the control period signal
public setPeriod: nat ==> ()
setPeriod(p) ==
  periodSelector := p;

thread 
   -- Periodic invocation to the generate signal generation
   -- Operation invoked once every 20 milliseconds
   periodic (20E6,0,0,0) (generateSignal)
 

sync

  mutex(generateSignal,getFlag);
  mutex(generateSignal);
  mutex(setPeriod,getPeriod);
 
end PWMunit